{"version":3,"sources":["assets\\src\\Network\\Socket.js"],"names":["cc","Class","Component","properties","onLoad","isParsable","input","JSON","parse","e","parseDataFormat","data","connectSocket","log","self","firstConnect","device_type","sys","isMobile","isNative","window","io","SocketIO","tempSocket","connect","constant","getSocketURL","global","setSocket","getSocket","connected","on","emit_obj","emit","listenEvent","settings","balance","after_balance","finishGeneratingBalance","console","ticket_id","consoScore","consoleScore","perfectScore","platform","finishGetData","resp","ecrypt","decrypt","commonErrorMessage","URL","lang","status_code","disconnect","removeEventListener"],"mappings":"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","sourceRoot":"/","sourcesContent":["import * as global from \"GlobalData\";\r\nimport * as constant from \"Constant\";\r\nimport * as ecrypt from \"Encrypt\";\r\n\r\ncc.Class({\r\n    extends: cc.Component,\r\n\r\n    properties: {\r\n        // foo: {\r\n        //    default: null,      // The default value will be used only when the component attaching\r\n        //                           to a node for the first time\r\n        //    url: cc.Texture2D,  // optional, default is typeof default\r\n        //    serializable: true, // optional, default is true\r\n        //    visible: true,      // optional, default is true\r\n        //    displayName: 'Foo', // optional\r\n        //    readonly: false,    // optional, default is false\r\n        // },\r\n        // ...\r\n    },\r\n\r\n    // use this for initialization\r\n    //mg2020\r\n    onLoad: function () {\r\n        // if(URL.lang != null){\r\n        //     if(URL.lang == \"en\" || URL.lang == \"ch\" || URL.lang == \"tw\" ){\r\n        //         global.setLang(URL.lang);\r\n        //     }else{\r\n        //         global.setLang(\"en\");\r\n        //         URL.lang = \"en\";\r\n        //     }\r\n        // }else{\r\n        //     global.setLang(\"en\");\r\n        //     URL.lang = \"en\";\r\n        // }\r\n    },\r\n\r\n    isParsable : function (input) {\r\n        try {\r\n            JSON.parse(input);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n\r\n    parseDataFormat: function(data){\r\n        if (this.isParsable(data) == true){\r\n            return JSON.parse(data);\r\n        }else{\r\n            return data;\r\n        }\r\n    },\r\n\r\n    connectSocket: function(data){\r\n        cc.log(\"--------- Connecting Socket ----------------\");\r\n        var self = this;\r\n        this.firstConnect = true;\r\n        var device_type = \"Desktop\";\r\n        if(cc.sys.isMobile){\r\n            device_type = \"Mobile\";\r\n        }\r\n\r\n        if (cc.sys.isNative) {\r\n            window.io = SocketIO;\r\n            // window.io = SocketIO || io;\r\n            cc.log(\"------------ JSB -------------\");\r\n            // not using bet in ketupat\r\n            if(data == \"bet\"){\r\n                var tempSocket = io.connect(constant.getSocketURL());\r\n                global.setSocket(tempSocket);\r\n                cc.log(constant.getSocketURL());\r\n            }\r\n            else{\r\n                var tempSocket = io.connect(constant.getSocketURL() );\r\n                global.setSocket(tempSocket);\r\n                cc.log(constant.getSocketURL());\r\n            }\r\n        }else {\r\n            cc.log(\"------------ default -------------\");\r\n        // window.io = require('socket.io-client');\r\n            // not using bet in ketupat\r\n            if(data == \"bet\"){\r\n                cc.log(\"constant.getSocketURL() = \"+constant.getSocketURL());\r\n                var tempSocket = io(constant.getSocketURL());\r\n                global.setSocket(tempSocket);\r\n            }\r\n            else{\r\n                cc.log(\"constant.getSocketURL() = \"+constant.getSocketURL());\r\n                var tempSocket = io(constant.getSocketURL());\r\n                global.setSocket(tempSocket);\r\n            }\r\n        }\r\n\r\n        cc.log(\"XXXXXXXXXXXXXXXXXXXXXXx\")\r\n        cc.log('check 1', global.getSocket().connected);\r\n        // if(!cc.sys.isNative){\r\n        global.getSocket().on('connect', function() {\r\n            cc.log(\"Socket Connected\");\r\n            cc.log('check 2', global.getSocket().connected);\r\n            var emit_obj = {\r\n                \r\n            };\r\n\r\n            // emit_obj = ecrypt.encrypt(JSON.stringify(emit_obj));\r\n            global.getSocket().emit(\"subscribe\",emit_obj);\r\n\r\n        });\r\n        self.listenEvent();\r\n        // }\r\n        // this.getComponent(\"MainMenu\").load_layer.active = false;\r\n\r\n        // this.getComponent(\"MainMenu\").initializeVariable();\r\n    },\r\n\r\n    listenEvent: function(){\r\n        var self = this;\r\n        global.getSocket().on('balance', function(data){\r\n            // data = self.parseDataFormat(data);\r\n            // var resp = data;\r\n            \r\n            global.settings.balance = data.after_balance;\r\n            global.finishGeneratingBalance = true;\r\n        });\r\n\r\n        global.getSocket().on('reconnecting', function(){\r\n            console.log(\"reconnecting\");\r\n        });\r\n\r\n        global.getSocket().on('reconnect', function(){\r\n            console.log(\"success reconnect\");\r\n        });\r\n\r\n        global.getSocket().on('getResult', function(data){\r\n            global.ticket_id = data.ticket_id;\r\n            global.settings.balance = data.balance;\r\n            global.consoScore = data.consoleScore;\r\n            global.perfectScore =data.perfectScore;\r\n            global.platform = data.platform;\r\n            global.finishGetData = true;\r\n    \r\n        });\r\n\r\n        \r\n\r\n        global.getSocket().on('kick-user-maintenance', function(data){\r\n            // data = self.parseDataFormat(data);\r\n            // var resp = data;\r\n            data = self.parseDataFormat(data);\r\n            var resp = ecrypt.decrypt(data);\r\n            resp = self.parseDataFormat(resp);\r\n            cc.log(resp);\r\n\r\n            // self.getComponent(\"uiController\").showErrorMessage(commonErrorMessage[URL.lang][resp.status_code], true);\r\n        });\r\n\r\n        global.getSocket().on('kick-user', function(data){\r\n            cc.log(\"kick-User\");\r\n\r\n            // var resp = data;\r\n            data = self.parseDataFormat(data);\r\n            var resp = ecrypt.decrypt(data);\r\n            resp = self.parseDataFormat(resp);\r\n\r\n            if(commonErrorMessage[URL.lang][resp.status_code] != null){\r\n                // self.getComponent(\"uiController\").showErrorMessage(commonErrorMessage[URL.lang][resp.status_code], true);\r\n            }\r\n\r\n            if(resp.status_code == \"1028\"){\r\n                global.getSocket().disconnect()\r\n            }\r\n        });\r\n    },\r\n\r\n    removeEventListener: function(){\r\n        global.getSocket().removeEventListener(\"balance\");\r\n        global.getSocket().removeEventListener(\"reconnecting\");\r\n        global.getSocket().removeEventListener(\"reconnect\");\r\n        global.getSocket().removeEventListener(\"onSubscribeDone\");\r\n        global.getSocket().removeEventListener(\"onResult\");\r\n        global.getSocket().removeEventListener(\"kick-user-maintenance\");\r\n        global.getSocket().removeEventListener(\"kick-user\");\r\n    },\r\n\r\n    \r\n});\r\n"]}